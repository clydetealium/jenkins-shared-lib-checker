
String comma = ','
String sourceVersion = '1234567'

library(
  identifier: 'jenkins-shared-lib@SUP-1915_jp_lambda_update_issues',
  retriever: modernSCM([
    $class: 'GitSCMSource',
    remote: 'https://github.com/Tealium/jenkins-shared-lib',
    credentialsId: 'github-cicd-bot-teal-token'
  ])
)

Map<String,String> lambdaJarToFunctionNames = [
  'audience_sizing_jobs_launcher_lambda':'audience-sizing-jobs-launcher',
  'data_access_worker_lambda':'da-purge',
  'metrics_aggregator_lambda':'metrics-aggregator',
  'visitor_api':'visitor-api-delete,visitor-api-get',
  'visitors_stream_processor_lambda':'visitor-ids-stream-consumer',
]

List<String> kubeComponents = [
  'amazon_uploader',
  'audience_store_uploader',
  'bulk_downloader',
  'bulk_eventstream_processor',
  'concurrent_users',
  'data_distributor',
  'data_distributor_batch',
  'data_distributor_scheduler',
  'databridge',
  'delayed_action_processor',
  'eventstream_processor',
  'historic_visitor_processor',
  'permission_cache',
  'publish_engine',
  'query_aggregator',
  'uconnect',
  'urest_service',
  'tealium_hazelcast',
  'visitor_cache',
  'visitor_processor',
  'visitor_service',
  'visitors_stream_processor',
]

List<String> lambdaFunctions = [
  'audience_sizing_jobs_launcher_lambda',
  'data_access_worker_lambda',
  'metrics_aggregator_lambda',
  'visitor_api',
  'visitors_stream_processor_lambda',
]

List<String> remainingComponents = [
  'billing_data_collector',
  'cloud_fn_lambda',
  'data_access_repository',
  'data_access_spectrum',
  'data_access_worker',
  'dataarchive_cron',
  'datadownload_cron',
  'dataharvester_cron',
  'freetrial_cron',
  'selfservice_cron',
  'tagalerts_cron',
  'user_migrator',
]

List<String> allComponents = kubeComponents + lambdaFunctions + remainingComponents

String allComponentsStr = allComponents.join(comma)

pipeline {
  agent {
    kubernetes {
      label 'jenkins-demo'
      containerTemplate {
        name 'bub'
        image 'tealium-docker-virtual-registry.jfrog.io/jenkins-webhooks-container:latest'
        ttyEnabled true
        command 'cat'
      }
    }
  }

  environment {
    COMPONENTS = "${allComponentsStr}"
  }

  stages {
    
    stage('Deploy AWS Lambda functions for the environment') {
      environment {
        SOURCE_VERSION = "${sourceVersion}"
      }
      steps {
        script {
          env.LAMBDA_FUNCTION_NAMES = "${(lambdaJarToFunctionNames.inject([]) { list, k, v -> env.COMPONENTS.contains(k) ? list + v : list }).join(comma)}"
          println("LambdaFunctionNames: ${env.LAMBDA_FUNCTION_NAMES}")
        }
        container('bub') {
          sh './jenkins/deploy_lambda_functions.sh'
        }
      }
    }

  }
}
